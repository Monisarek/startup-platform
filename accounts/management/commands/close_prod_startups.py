from django.core.management.base import BaseCommand
from accounts.models import Startups, ReviewStatuses


class Command(BaseCommand):
    help = '–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ'

    def handle(self, *args, **options):
        self.stdout.write("=== –ó–ê–ö–†–´–¢–ò–ï –°–¢–ê–†–¢–ê–ü–û–í –í –ü–†–û–î–ê–ö–®–ù –ë–ê–ó–ï ===")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "Closed"
            closed_status = ReviewStatuses.objects.get(status_name="Closed")
            self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å 'Closed' —Å ID: {closed_status.status_id}")
        except ReviewStatuses.DoesNotExist:
            self.stdout.write(
                self.style.ERROR('‚ùå –û–®–ò–ë–ö–ê: –°—Ç–∞—Ç—É—Å "Closed" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ ReviewStatuses')
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã
        startups = Startups.objects.all()
        total_count = startups.count()
        
        if total_count == 0:
            self.stdout.write("‚ÑπÔ∏è  –°—Ç–∞—Ä—Ç–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        self.stdout.write(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ: {total_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        status_counts = {}
        for startup in startups:
            status = startup.status
            if status not in status_counts:
                status_counts[status] = 0
            status_counts[status] += 1
        
        self.stdout.write("üìà –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ:")
        for status, count in status_counts.items():
            self.stdout.write(f"   - {status}: {count} —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        self.stdout.write("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤:")
        for startup in startups[:5]:
            self.stdout.write(f"   - {startup.title} (ID: {startup.startup_id}) - —Å—Ç–∞—Ç—É—Å: {startup.status}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã
        self.stdout.write(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ {total_count} —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤...")
        updated_count = 0
        for startup in startups:
            old_status = startup.status
            startup.status = 'closed'
            startup.status_id = closed_status
            startup.save(update_fields=['status', 'status_id'])
            updated_count += 1
            if updated_count <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                self.stdout.write(f"   ‚úÖ {startup.title} (ID: {startup.startup_id}) - {old_status} ‚Üí closed")
            elif updated_count == 11:
                self.stdout.write("   ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è)")

        self.stdout.write(f"\nüéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤: {updated_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        approved_count = Startups.objects.filter(status="approved").count()
        closed_count = Startups.objects.filter(status="closed").count()
        self.stdout.write(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
        self.stdout.write(f"   - –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö (approved): {approved_count}")
        self.stdout.write(f"   - –ó–∞–∫—Ä—ã—Ç—ã—Ö (closed): {closed_count}")
        
        if approved_count > 0:
            self.stdout.write(
                self.style.WARNING(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {approved_count} —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –≤—Å–µ –µ—â–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å 'approved'!")
            )
        else:
            self.stdout.write(
                self.style.SUCCESS("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ!")
            )
